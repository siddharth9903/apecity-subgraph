type _Schema_
  @fulltext(
    name: "tokenMetaDataSearch"
    language: en
    algorithm: rank
    include: [
      {
        entity: "TokenMetaData"
        fields: [
          { name: "name" }
          { name: "description" }
          { name: "symbol" }
        ]
      }
    ]
  )

type Factory @entity {
  # factory address
  id: ID!
  # token info
  tokenCount: Int!
  # pair info
  bondingCurveCount: Int!
  # transactions
  txCount: BigInt!

  bondingCurves: [BondingCurve!] @derivedFrom(field: "factory")
  tokens: [Token!] @derivedFrom(field: "factory")
}

type Token @entity {
  # token address
  id: ID!

  # mirrored from the smart contract
  symbol: String!
  name: String!
  tokenURI: String!
  decimals: BigInt!

  metaData: TokenMetaData

  # used for other stats like marketcap
  totalSupply: BigInt!
  bondingCurve: BondingCurve!
  factory: Factory!
}

type TokenMetaData @entity{
  id: ID!

  name: String!
  description: String!
  symbol: String!
  image: String!
  twitter: String
  telegram: String
  website: String

  token: Token!
}

type BondingCurve @entity {
  # pair address
  id: ID!
  token: Token!

  reserveRatio: BigInt!
  poolBalance: BigDecimal!
  circulatingSupply: BigDecimal!
  active: Boolean!
  factory: Factory!
  
  currentPrice: BigDecimal!
  marketCap: BigDecimal!

  ethAmountToCompleteCurve: BigDecimal!
  tokenAmountToCompleteCurve: BigDecimal!

  totalEthAmountToCompleteCurve: BigDecimal!
  totalTokenAmountToCompleteCurve: BigDecimal!

  uniswapRouter: Bytes!
  uniswapLiquidityPool: Bytes
  lpCreationTimestamp: BigInt

  txCount: BigInt!

  # creation stats
  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!

  lastActivity: BigInt!

  volume: BigDecimal!
  trades: [Trade!] @derivedFrom(field: "bondingCurve")
}

type User @entity {
  id: ID!
  trades: [Trade!] @derivedFrom(field: "user")
}

enum TradeType {
  BUY
  SELL
}

type Trade @entity {
  # transaction hash + "-" + index in swaps Transaction array
  id: ID!
  transaction: Transaction!
  timestamp: BigInt! # need this to pull recent txns for specific token or pair
  bondingCurve: BondingCurve!

  type: TradeType!
  inAmount: BigDecimal!
  outAmount: BigDecimal!

  openPrice: BigDecimal!
  closePrice: BigDecimal!

  avgPrice: BigDecimal!

  user: User!
}

type Transaction @entity {
  id: ID! # txn hash
  blockNumber: BigInt!
  timestamp: BigInt!

  trade: Trade!
}
